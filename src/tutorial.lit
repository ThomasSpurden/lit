# [/ ](root.html) tutorial

In `lit`, a code file is separted into labeled chunks. As an author of 
a `lit` program, chunks may be placed in any order (best fit for explanation).
 However, an index must exist to define the proper order for `lit` to reconstruct the code file.

This is the label for a code chunk, `<< some name >>=`. Everything sharing the same indent
is the code that it contains. Otherwise, it's considered part of the narrative. An example chunk:

<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;<< a comment >>=<br>&nbsp;&nbsp;&nbsp;&nbsp;// I happen to be a JavaScript comment</code></pre>

Chunks can be surrounded with narrative.

<pre><code>This is a great place to explain the complexity<br>of print statements in Javascript.<br>&nbsp;&nbsp;&nbsp;&nbsp;<< say hello >>=<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log("Hello World!);</code></pre>

The code contained in a chunk can be referred to later in the program, through
a chunk's label.

For the smallest example of a complete `lit` program we need to specify the index.
The index represents the instructions for building the code file. In `lit`, the index 
is just another `lit` macro with an arbitrary name, it's the `<< * >>=` macro.  Because it's
just another macro it can contain Javascript or the macros we defined earlier.

*Note: If lit cannot find a macro with the name `*` it assumes the first macro is the index.*

A complete example.

<pre><code>Here's a general overview of hello world in Javascript<br>&nbsp;&nbsp;&nbsp;&nbsp;<< * >>=<br>&nbsp;&nbsp;&nbsp;&nbsp;<< a comment >><br>&nbsp;&nbsp;&nbsp;&nbsp;<< say hello >><br><br>Its perfectly valid to write a sentence here.<br>&nbsp;&nbsp;&nbsp;&nbsp;<< a comment >>=<br>&nbsp;&nbsp;&nbsp;&nbsp;// I happen to be a JavaScript comment<br><br>This is a great place to explain the complexity<br>of print statements in Javascript.<br>&nbsp;&nbsp;&nbsp;&nbsp;<< say hello >>=<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log("Hello World!);</code></pre>

With this file several things can be accomplished. 

- A lengthy piece of code can be broken into pieces and explained at a high-level with narrative.
- The code can be extracted
- Really nice documentation can be generated

### Extract the code

`lit --code helloWorld.js.lit`

`lit` generates `helloWorld.js`

<pre><code>// I happen to be a JavaScript comment<br>console.log("Hello World!);</code></pre>

### Nice documenation

Although the examples above relied on plain text, markdown can be used for the narrative.
This allows for very presentable documentation. To read the documentation for `lit` applied
to its own source follow [here](root.html).
